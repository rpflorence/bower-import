var bower = require('bower');
var path = require('path');
var jf = require('jsonfile');
var fs = require('fs');
var prompt = require('sync-prompt').prompt;
var log = require('./lib/log');

module.exports = function(program) {
  return Object.create(importer).init(program);
};

var importer = exports.importer = {

  init: function(program) {
    this.env = Object.create(program);
    this.run();
    return this;
  },

  run: function() {
    bower.commands.list().on('end', this.onReadBower.bind(this));
  },

  onReadBower: function(bowerData) {
    var deps = makeArray(bowerData.dependencies);
    this.env.pkgConfig = deps.filter(this.filterDep).map(this.mapDep);
    this.addAppToPackageConfig();
    jf.readFile(this.env.config, this.onReadUserConfig.bind(this));
  },

  onReadUserConfig: function(err, json) {
    if (err) throw new Error(err);
    this.env.userConfig = json;
    if (this.env.stdout) {
      process.stdout.write(JSON.stringify(this.env.pkgConfig, null, 2)+'\n');
    } else {
      this.writeConfig();
    }
  },

  writeConfig: function() {
    this.env.userConfig.packages = this.env.pkgConfig;
    var configPath = this.env.outfile || this.env.config.replace(/\.json/, '.js');
    var src = '// auto-generated by bower-import, edits will be lost\n'+
              'var require = '+JSON.stringify(this.env.userConfig, null, 2)+'\n';
    fs.writeFile(configPath, src, function() {
      console.log('=> generated loader config', configPath);
    });
  },

  addAppToPackageConfig: function() {
    this.env.pkgConfig.unshift({name: 'app', location: this.env.app});
  },

  filterDep: function(dep) {
    var name = dep.endpoint.name;
    if (name == 'requirejs') {
      return false;
    }
    var formats = dep.pkgMeta.moduleFormats;
    var amd = formats && ~formats.indexOf('amd');
    if (!amd) {
      var response = prompt(name+' does not appear to support amd, if it does please confirm: (y/n): ');
      if (response == 'y') {
        return true;
      }
      log.write('to shim '+name+' please see http://requirejs.org/docs/api.html#config-shim');
    }
    if (!dep.pkgMeta.main) {
      log.warn('skipping '+name+', no main script configured');
      return false;
    }
    return amd;
  },

  mapDep: function(dep) {
    var name = dep.endpoint.name;
    var main = dep.pkgMeta.main.replace(/\.js$/, '');
    if (main == 'main') {
      return name;
    }
    return {
      name: name,
      main: main
    };
  }

};

function makeArray(obj) {
  var arr = [];
  for (var key in obj) arr.push(obj[key]);
  return arr;
}

